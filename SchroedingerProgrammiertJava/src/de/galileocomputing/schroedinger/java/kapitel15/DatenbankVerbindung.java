package de.galileocomputing.schroedinger.java.kapitel15;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * 
 * @author Philip Ackermann
 *
 */
public class DatenbankVerbindung {
	private final static String ERSTELLE_TABELLE_ANWEISUNG = "CREATE TABLE UNSERE_HELDEN (" +
			"ID INT NOT NULL GENERATED BY DEFAULT AS IDENTITY, " +
			"NAME VARCHAR(32), " +
			"KLASSE VARCHAR(32), " +
			"CHARISMA INT, " +
			"STAERKE INT, " +
			"AUSDAUER INT, " +
			"ERFAHRUNG INT, " +
			"PRIMARY KEY (ID) " + 
			")";
	
	private final static String ERSTELLE_TABELLE_WAFFEN_ANWEISUNG = "CREATE TABLE WAFFEN (" +
			"ID INT NOT NULL GENERATED BY DEFAULT AS IDENTITY, " +
			"WAFFEN_NAME VARCHAR(32), " +
			"HELD_NAME VARCHAR(32) " +
			")";
	
	@SuppressWarnings("unused")
	private final static String EINFUEGE_ANWEISUNG = "INSERT INTO UNSERE_HELDEN VALUES (DEFAULT, ?, ?, ?, ?, ?, ?)";
	
	public static void main(String[] args) throws ClassNotFoundException, SQLException {
		Connection verbindung = erstelleVerbindung();
		try {
			verbindung.setAutoCommit(false);
			erstelleTabelleHelden(verbindung);
			loescheHelden(verbindung);
			erstelleHelden(verbindung);
			verbindung.commit();
			verbindung.setAutoCommit(true);
			ResultSet ergebnis = selektiereHelden(verbindung);
			gebeAusHelden(ergebnis);
			erstelleTabelleWaffen(verbindung);
			loescheWaffen(verbindung);
			erstelleWaffen(verbindung);
			ResultSet waffenDerHelden = selektiereWaffenUndHelden(verbindung);
			gebeAusWaffenUndHelden(waffenDerHelden);
		} catch (Exception e) {
			try {
				verbindung.rollback();
			} catch (SQLException e1) {
			}
		}
		
		
		PreparedStatement abfrageAnweisung = verbindung.prepareStatement("SELECT * FROM UNSERE_HELDEN");
		ResultSet ergebnis = abfrageAnweisung.executeQuery();
		System.out.println("Helden vor Transaktion");
		gebeAusHelden(ergebnis);
		try {
			
			verbindung.setAutoCommit(false);
			Statement loescheHeldenAnweisung = verbindung.createStatement();
			loescheHeldenAnweisung.executeUpdate("DELETE FROM UNSERE_HELDEN");
			loescheHeldenAnweisung.close();
			
			Statement loescheWaffenAnweisung = verbindung.createStatement();
			loescheWaffenAnweisung.executeUpdate("DELETE FROM WAFFEN");
			loescheWaffenAnweisung.close();
			
//			if(true) {
//				throw new Exception();
//			}
			
			Statement heldenAnweisung = verbindung.createStatement();
			heldenAnweisung.executeUpdate("INSERT INTO UNSERE_HELDEN (NAME, KLASSE, CHARISMA, STAERKE, AUSDAUER, ERFAHRUNG) VALUES ('Bossingen', 'Cheftroll', 4, 20, 20, 50)");
			heldenAnweisung.close();
			
			Statement waffenAnweisung = verbindung.createStatement();
			waffenAnweisung.executeUpdate("INSERT INTO WAFFEN (WAFFEN_NAME, HELD_NAME) VALUES ('Klappbares Smartphone', 'Bossingen')");
			waffenAnweisung.close();
			
			verbindung.commit();
			verbindung.setAutoCommit(true);
		} catch (Exception e) {
			try {
				verbindung.rollback();
			} catch (SQLException e1) {
			}
		} finally {
			System.out.println("Helden nach Transaktion");
			ergebnis = abfrageAnweisung.executeQuery();
			gebeAusHelden(ergebnis);
		}

	}

	private static Connection erstelleVerbindung()
			throws ClassNotFoundException, SQLException {
		Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
//			Connection verbindung = DriverManager.getConnection("jdbc:derby:memory:helden;create=true");
		Connection verbindung = DriverManager.getConnection("jdbc:derby:d:/Dev/datenbanken/helden;create=true");
		return verbindung;
	}

	private static void erstelleTabelleHelden(Connection verbindung)
			throws SQLException {
		DatabaseMetaData metaDaten = verbindung.getMetaData();
		ResultSet tabellen = metaDaten.getTables(null, "APP", "UNSERE_HELDEN", null);
		if (!tabellen.next()) {
			Statement anweisung = verbindung.createStatement();
			anweisung.executeUpdate(ERSTELLE_TABELLE_ANWEISUNG);
			anweisung.close();
		}
	}
	
	private static void erstelleTabelleWaffen(Connection verbindung)
			throws SQLException {
		DatabaseMetaData metaDaten = verbindung.getMetaData();
		ResultSet tabellen = metaDaten.getTables(null, "APP", "WAFFEN", null);
		if (!tabellen.next()) {
			Statement anweisung = verbindung.createStatement();
			anweisung.executeUpdate(ERSTELLE_TABELLE_WAFFEN_ANWEISUNG);
			anweisung.close();
		}
	}

	private static void loescheHelden(Connection verbindung)
			throws SQLException {
		Statement loeschenAnweisung = verbindung.createStatement();
		loeschenAnweisung.executeUpdate("DELETE FROM UNSERE_HELDEN");
		loeschenAnweisung.close();
	}
	
	private static void loescheWaffen(Connection verbindung)
			throws SQLException {
		Statement loeschenAnweisung = verbindung.createStatement();
		loeschenAnweisung.executeUpdate("DELETE FROM WAFFEN");
		loeschenAnweisung.close();
	}
	
	private static void erstelleHelden(Connection verbindung)
			throws SQLException {
//		PreparedStatement einfuegeAnweisung = verbindung.prepareStatement(EINFUEGE_ANWEISUNG);
//		einfuegeAnweisung.setString(1, "Juppi");
//		einfuegeAnweisung.setString(2, "Zwerg");
//		einfuegeAnweisung.setInt(3, 9);
//		einfuegeAnweisung.setInt(4, 20);
//		einfuegeAnweisung.setInt(5, 5);
//		einfuegeAnweisung.setInt(6, 160);
//		einfuegeAnweisung.executeUpdate();
		Statement einfuegeAnweisung = verbindung.createStatement();
		einfuegeAnweisung.addBatch("INSERT INTO UNSERE_HELDEN (NAME, KLASSE, CHARISMA, STAERKE, AUSDAUER, ERFAHRUNG) VALUES ('SchroeDanger', 'Zwergenkrieger', 11, 11, 11, 200)");
		einfuegeAnweisung.addBatch("INSERT INTO UNSERE_HELDEN (NAME, KLASSE, CHARISMA, STAERKE, AUSDAUER, ERFAHRUNG) VALUES ('Jeppi', 'Nachtelf', 20, 7, 15, 180)");
		einfuegeAnweisung.addBatch("INSERT INTO UNSERE_HELDEN (NAME, KLASSE, CHARISMA, STAERKE, AUSDAUER, ERFAHRUNG) VALUES ('Juppi', 'Zwerg', 9, 20, 5, 160)");
		einfuegeAnweisung.addBatch("INSERT INTO UNSERE_HELDEN (NAME, KLASSE, CHARISMA, STAERKE, AUSDAUER, ERFAHRUNG) VALUES ('Jappi', 'Krieger', 14, 17, 11, 170)");
		einfuegeAnweisung.addBatch("INSERT INTO UNSERE_HELDEN (NAME, KLASSE, CHARISMA, STAERKE, AUSDAUER, ERFAHRUNG) VALUES ('Joppi', 'Zauberer', 20, 4, 8, 400)");
		einfuegeAnweisung.executeBatch();
		einfuegeAnweisung.close();
	}
	
	private static void erstelleWaffen(Connection verbindung)
			throws SQLException {
		Statement einfuegeAnweisung = verbindung.createStatement();
		einfuegeAnweisung.addBatch("INSERT INTO WAFFEN (WAFFEN_NAME, HELD_NAME) VALUES ('Doppelaxt', 'SchroeDanger')");
		einfuegeAnweisung.addBatch("INSERT INTO WAFFEN (WAFFEN_NAME, HELD_NAME) VALUES ('Dolch', 'SchroeDanger')");
		einfuegeAnweisung.addBatch("INSERT INTO WAFFEN (WAFFEN_NAME, HELD_NAME) VALUES ('Bogen', 'Jeppi')");
		einfuegeAnweisung.addBatch("INSERT INTO WAFFEN (WAFFEN_NAME, HELD_NAME) VALUES ('Pfeile', 'Jeppi')");
		einfuegeAnweisung.addBatch("INSERT INTO WAFFEN (WAFFEN_NAME, HELD_NAME) VALUES ('Streithammer', 'Juppi')");
		einfuegeAnweisung.addBatch("INSERT INTO WAFFEN (WAFFEN_NAME, HELD_NAME) VALUES ('Schwert', 'Jappi')");
		einfuegeAnweisung.addBatch("INSERT INTO WAFFEN (WAFFEN_NAME, HELD_NAME) VALUES ('Schwert', 'Jappi')");
		einfuegeAnweisung.addBatch("INSERT INTO WAFFEN (WAFFEN_NAME, HELD_NAME) VALUES ('Zauberstab', 'Joppi')");;
		einfuegeAnweisung.executeBatch();
		einfuegeAnweisung.close();
	}

	private static ResultSet selektiereHelden(Connection verbindung)
			throws SQLException {
		//			PreparedStatement abfrageAnweisung = verbindung.prepareStatement("SELECT * FROM UNSERE_HELDEN");
		//			PreparedStatement abfrageAnweisung = verbindung.prepareStatement("SELECT * FROM UNSERE_HELDEN WHERE STAERKE >= 10");
		//			PreparedStatement abfrageAnweisung = verbindung.prepareStatement("SELECT * FROM UNSERE_HELDEN WHERE STAERKE >= 10 AND ERFAHRUNG >= 200");
		//			PreparedStatement abfrageAnweisung = verbindung.prepareStatement("SELECT * FROM UNSERE_HELDEN WHERE STAERKE >= 10 OR ERFAHRUNG >= 200");
		//			PreparedStatement abfrageAnweisung = verbindung.prepareStatement("SELECT * FROM UNSERE_HELDEN WHERE STAERKE NOT BETWEEN 10 AND 200");
		//			PreparedStatement abfrageAnweisung = verbindung.prepareStatement("SELECT * FROM UNSERE_HELDEN WHERE STAERKE != 11");
		//			PreparedStatement abfrageAnweisung = verbindung.prepareStatement("SELECT * FROM UNSERE_HELDEN WHERE NAME LIKE 'J%i'");
					PreparedStatement abfrageAnweisung = verbindung.prepareStatement("SELECT * FROM UNSERE_HELDEN WHERE NAME LIKE 'J%i' ORDER BY NAME ASC");
		//			abfrageAnweisung.setMaxRows(3);
		//			ResultSet ergebnis = abfrageAnweisung.executeQuery();
					ResultSet ergebnis = abfrageAnweisung.executeQuery();
		//			ResultSet ergebnis = abfrageAnweisung.executeQuery("SELECT NAME, STAERKE FROM UNSERE_HELDEN ORDER BY STAERKE DESC");
		return ergebnis;
	}
	
	private static ResultSet selektiereWaffenUndHelden(Connection verbindung)
			throws SQLException {
//		PreparedStatement abfrageAnweisung = verbindung.prepareStatement("SELECT * FROM UNSERE_HELDEN H, WAFFEN W WHERE H.NAME = W.HELD_NAME");
		PreparedStatement abfrageAnweisung = verbindung.prepareStatement("SELECT * FROM UNSERE_HELDEN INNER JOIN WAFFEN ON UNSERE_HELDEN.NAME = WAFFEN.HELD_NAME");
					ResultSet ergebnis = abfrageAnweisung.executeQuery();
		return ergebnis;
	}

	private static void gebeAusHelden(ResultSet ergebnis)
			throws SQLException {
//		while (ergebnis.next()) {
//		    System.out.println(ergebnis.getString("NAME"));
//		}
		while (ergebnis.next()) {
			String id = ergebnis.getString("ID");
		    String name = ergebnis.getString("NAME");
		    String klasse = ergebnis.getString("KLASSE");
		    int charisma = ergebnis.getInt("CHARISMA");
		    int staerke = ergebnis.getInt("STAERKE");
		    int ausdauer = ergebnis.getInt("AUSDAUER");
		    int erfahrung = ergebnis.getInt("ERFAHRUNG");
		    System.out.println("ID: " + id);
		    System.out.println("Waffe: " + name);
		    System.out.println("Klasse: " + klasse);
		    System.out.println("Charisma: " + charisma);
		    System.out.println("Stärke: " + staerke);
		    System.out.println("Ausdauer: " + ausdauer);
		    System.out.println("Erfahrung: " + erfahrung);
		    System.out.println("*****************************");
		}
	}
	
	private static void gebeAusWaffenUndHelden(ResultSet ergebnis)
			throws SQLException {
		while (ergebnis.next()) {
		  String held = ergebnis.getString("NAME");
		  String klasse = ergebnis.getString("KLASSE");
		  String waffe = ergebnis.getString("WAFFEN_NAME");
		  System.out.println("Held: " + held);
		  System.out.println("Klasse: " + klasse);
		  System.out.println("Waffe: " + waffe);
		  System.out.println("*****************************");
		}
	}
}
